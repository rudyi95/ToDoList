{"version":3,"sources":["Components/ToDoForm.js","Components/Todo.js","Components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoForm","addTodo","removeBtn","showTodo","count","useState","id","task","completed","todo","setTodo","value","setValue","onSubmit","e","preventDefault","trim","uuid","v4","className","type","placeholder","onChange","target","maxLength","onClick","Todo","removeTodo","variant","style","textDecoration","IconButton","width","height","ToDoList","todos","map","key","App","setTodos","setCount","filter","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","filtered","filteredFalse","filteredTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d17f32bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { v4 as uuid } from \"uuid\";\r\nimport './style.css';\r\n\r\nexport default function ToDoForm({ addTodo, removeBtn, showTodo, count }) {\r\n\r\n    const [todo, setTodo] = useState({\r\n        id: '',\r\n        task: '',\r\n        completed: false,\r\n    });\r\n    const [value, setValue] = useState('All');\r\n\r\n    function InputChange(e) {\r\n        setTodo({ ...todo, task: e.target.value })\r\n    }\r\n\r\n    function Submit(e) {\r\n        e.preventDefault();\r\n        if (todo.task.trim()) {\r\n            addTodo({ ...todo, id: uuid.v4() });\r\n            setTodo({ ...todo, task: \"\" });\r\n        }\r\n    }\r\n\r\n    function removeClick() {\r\n        removeBtn(todo.id);\r\n    }\r\n\r\n    function changeShowCompleted() {\r\n        showTodo();\r\n        if (count === 0) {\r\n            setValue('Completed')\r\n        } else if (count === 1) {\r\n            setValue('In process')\r\n        } else {\r\n            setValue('All')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={Submit} className=\"todo_input\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"I must to do!!!\"\r\n                    id=\"todoInput\"\r\n                    value={todo.task}\r\n                    onChange={InputChange}\r\n                    maxLength=\"40\"\r\n                />\r\n                <span className=\"add_btn\">\r\n                    <button id=\"todoButton\" className=\"add_btn\" type=\"submit\">To Do</button>\r\n                </span>\r\n            </form>\r\n\r\n            <button\r\n                id=\"todoButton\"\r\n                className=\"add_btn\"\r\n                onClick={removeClick}\r\n                type=\"submit\"\r\n            >\r\n                Delete\r\n                </button>\r\n            <button\r\n                id=\"todoButton\"\r\n                className=\"add_btn\"\r\n                onClick={changeShowCompleted}\r\n                type=\"submit\"\r\n            >\r\n                {value}\r\n            </button>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default function Todo({ todo, completed, removeTodo }) {\r\n\r\n    function checkboxClick() {\r\n        completed(todo.id);\r\n    }\r\n\r\n    function removeClick() {\r\n\r\n        removeTodo(todo.id);\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"list_row_container\">\r\n            <li className=\"list_row\" onClick={checkboxClick}>\r\n                <span variant=\"body1\" style={{ textDecoration: todo.completed ? \"line-through\" : null }}>\r\n                    {todo.task}\r\n                </span>\r\n            </li>\r\n            <IconButton style={{ width: \"55px\", height: \"55px\" }} onClick={removeClick}><CloseIcon /></IconButton>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport Todo from \"./Todo\";\r\nimport './style.css';\r\n\r\nexport default function ToDoList({ todos, completed, removeTodo }) {\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"todo_list\" todos={todos}>\r\n            {todos ?\r\n                <ul id=\"todoList\">\r\n                    {todos.map(todo => (\r\n                        <Todo key={todo.id} todo={todo} completed={completed} removeTodo={removeTodo} />\r\n                    ))}\r\n                </ul> : ''}\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ToDoForm from './Components/ToDoForm';\nimport ToDoList from './Components/ToDoList';\n\nconst LOCAL_STORAGE_KEY = \"todo\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos])\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos])\n  }\n\n  function completed(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          }\n        }\n        return todo;\n      })\n    )\n  }\n\n  function removeBtn() {\n    setTodos(todos.filter(todo => (todo.completed === false)))\n  }\n\n  function removeTodo(id) {\n    let count = todos.filter(todo => {\n      return todo.id !== id\n    });\n    setTodos(count)\n  }\n\n  const filteredTodo = () => {\n    const filtered = todos.filter(todo => (todo.completed === true));\n    const filteredFalse = todos.filter(todo => (todo.completed === false));\n\n\n    if (count === 0) {\n      return (<ToDoList todos={todos} completed={completed} removeTodo={removeTodo} />)\n    } else if (count === 1) {\n      return (<ToDoList todos={filtered} completed={completed} removeTodo={removeTodo} />)\n    } else {\n      return (<ToDoList todos={filteredFalse} completed={completed} removeTodo={removeTodo} />)\n    }\n\n  }\n  function handleShowTodo() {\n    return (count < 2) ? setCount(++count) : setCount(0)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container_todo\">\n        <div className=\"todo\">\n          <ToDoForm removeBtn={removeBtn} addTodo={addTodo} showTodo={handleShowTodo} count={count} />\n          {filteredTodo()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}