{"version":3,"sources":["hooks/redux.ts","redux/reducers/todo.ts","service/storageService.ts","components/TodoItem/style.ts","components/TodoItem/index.tsx","service/todosService.ts","components/Buttons/CustomButton/style.ts","components/Buttons/CustomButton/index.tsx","containers/Todo/TodoForm/style.ts","containers/Todo/TodoForm/index.tsx","containers/Todo/TodoList/style.ts","containers/Todo/TodoList/index.tsx","pages/style.ts","pages/index.tsx","redux/store.ts","App.tsx","serviceWorker.js","index.js"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","todosSlice","createSlice","name","initialState","all","todo","completed","reducers","getAll","state","action","payload","getAllInProggress","getAllCompleted","storageService","set","key","value","localStorage","setItem","JSON","stringify","get","obj","data","getItem","parse","error","remove","removeItem","clear","findById","finding","id","find","item","filterById","filtering","filter","useStyles","makeStyles","root","display","justifyContent","alignItems","width","background","row","fontSize","flexWrap","wordWrap","marginTop","marginBottom","Todo","classes","dispatch","className","onClick","lsTodos","itemIndex","findIndex","actions","style","textDecoration","undefined","task","IconButton","height","newArr","CustomButton","text","type","classnames","boxShadow","borderBottom","borderRadius","overflow","todoInput","textAlign","overflowWrap","outline","addBtn","todoBtn","backgroundColor","color","padding","borderWidth","borderStyle","borderColor","transition","btnGroup","ToDoForm","useState","setTodo","filterHandler","e","currentTarget","inProggress","onSubmit","preventDefault","trim","v4","placeholder","onChange","target","maxLength","Custom","flexDirection","overflowX","listItem","listStyle","listStylePosition","ToDoList","todos","useEffect","map","minWidth","minHeight","MainPage","Form","List","rootReducer","combineReducers","App","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f9c49f85.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"../redux/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { TodoItem } from \"../../types/todo\";\r\n\r\nexport const initialState = {\r\n all: [] as TodoItem[],\r\n todo: [] as TodoItem[],\r\n completed: [] as TodoItem[]\r\n};\r\n\r\nexport const todosSlice = createSlice({\r\n  name: \"todo\",\r\n  initialState,\r\n  reducers: {\r\n      getAll: (state, action: PayloadAction<TodoItem[]>) => {\r\n          state.all = action.payload\r\n      },\r\n      getAllInProggress: (state, action: PayloadAction<TodoItem[]>) => {\r\n          state.todo = action.payload\r\n      },\r\n      getAllCompleted: (state, action: PayloadAction<TodoItem[]>) => {\r\n          state.completed = action.payload\r\n      }\r\n  },\r\n});\r\n\r\nexport default todosSlice.reducer;\r\n","const storageService = {\r\n  set<T>(key: string, value: T) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  },\r\n\r\n  get<T>(key: string): T | null {\r\n    const data: any = localStorage.getItem(key);\r\n\r\n    if (!data) return null;\r\n\r\n    let obj: T | null;\r\n\r\n    try {\r\n      obj = JSON.parse(data) as T;\r\n    } catch (error) {\r\n      obj = null;\r\n    }\r\n\r\n    return obj;\r\n  },\r\n\r\n  remove(key: string) {\r\n    localStorage.removeItem(key);\r\n  },\r\n\r\n  clear() {\r\n    localStorage.clear();\r\n  },\r\n\r\n  findById<T extends { id: number }>(finding: T[], id: number): T | undefined {\r\n    const res = finding.find((item: T) => item.id === id);\r\n    return res;\r\n  },\r\n\r\n  filterById<T extends { id: number }>(filtering: T[], id: number): T[] {\r\n    const res = filtering.filter((item: T) => item.id !== id);\r\n    return res;\r\n  },\r\n};\r\n\r\nexport default storageService;\r\n","import { makeStyles } from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n    background: \"rgb(247,247,247)\",\r\n  },\r\n  row: {\r\n    width: \"80%\",\r\n    fontSize: 24,\r\n    flexWrap: \"wrap\",\r\n    wordWrap: \"break-word\",\r\n    marginTop: 5,\r\n    marginBottom: 15,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\nimport { useAppDispatch } from \"../../hooks/redux\";\r\nimport { completeTask, removeTodo } from \"../../service/todosService\";\r\nimport { TodoItem } from \"../../types/todo\";\r\n\r\nimport { useStyles } from \"./style\";\r\n\r\ninterface IProps {\r\n  todo: TodoItem;\r\n}\r\n\r\nexport const Todo: React.FC<IProps> = ({ todo }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const checkboxClick = () => {\r\n    dispatch(completeTask(todo.id));\r\n  };\r\n\r\n  const removeClick = () => {\r\n    dispatch(removeTodo(todo.id));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <li className={classes.row} onClick={checkboxClick}>\r\n        <span\r\n          style={{\r\n            textDecoration: todo.completed ? \"line-through\" : undefined,\r\n          }}\r\n        >\r\n          {todo.task}\r\n        </span>\r\n      </li>\r\n      <IconButton style={{ width: \"55px\", height: \"55px\" }} onClick={removeClick}>\r\n        <CloseIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\n","import { todosSlice } from \"../redux/reducers/todo\";\r\nimport { AppDispatch } from \"../redux/store\";\r\nimport { TodoItem } from \"../types/todo\";\r\nimport storageService from \"./storageService\";\r\n\r\nexport const getAllTodos = () => (dispatch: AppDispatch) => {\r\n  const lsTodos = storageService.get<TodoItem[]>(\"todo\");\r\n  if (lsTodos) {\r\n    dispatch(todosSlice.actions.getAll(lsTodos));\r\n  } else {\r\n    dispatch(todosSlice.actions.getAll([]));\r\n  }\r\n};\r\n\r\nexport const addTodo = (item: TodoItem) => (dispatch: AppDispatch) => {\r\n  const lsTodos = storageService.get<TodoItem[]>(\"todo\");\r\n  if (lsTodos) {\r\n    storageService.set(\"todo\", [item, ...lsTodos]);\r\n    dispatch(todosSlice.actions.getAll([item, ...lsTodos]));\r\n  } else {\r\n    storageService.set(\"todo\", [item]);\r\n    dispatch(todosSlice.actions.getAll([item]));\r\n  }\r\n};\r\n\r\nexport const completeTask = (id: string) => (dispatch: AppDispatch) => {\r\n  const lsTodos = storageService.get<TodoItem[]>(\"todo\");\r\n  if (lsTodos) {\r\n    let itemIndex = lsTodos.findIndex((item) => item.id === id);\r\n    lsTodos[itemIndex].completed = true;\r\n    storageService.set(\"todo\", lsTodos);\r\n    dispatch(todosSlice.actions.getAll(lsTodos));\r\n  }\r\n};\r\n\r\nexport const removeTodo = (id: string) => (dispatch: AppDispatch) => {\r\n  const lsTodos = storageService.get<TodoItem[]>(\"todo\");\r\n  if (lsTodos) {\r\n    const newArr = lsTodos.filter((item) => item.id !== id);\r\n    storageService.set(\"todo\", newArr);\r\n    dispatch(todosSlice.actions.getAll(newArr));\r\n  }\r\n};\r\n\r\nexport const removeAll = () => (dispatch: AppDispatch) => {\r\n  storageService.set(\"todo\", []);\r\n  dispatch(todosSlice.actions.getAll([]));\r\n};\r\n\r\nexport const filterTodos = (type: string) => (dispatch: AppDispatch) => {\r\n  const lsTodos = storageService.get<TodoItem[]>(\"todo\");\r\n  if (lsTodos) {\r\n    switch (type) {\r\n      case \"Completed\":\r\n        const completed = lsTodos.filter((todo: TodoItem) => todo.completed === true);\r\n        dispatch(todosSlice.actions.getAll(completed));\r\n        break;\r\n      case \"In progress\":\r\n        const inProggress = lsTodos.filter((todo: TodoItem) => todo.completed === false);\r\n        dispatch(todosSlice.actions.getAll(inProggress));\r\n        break;\r\n      default:\r\n        dispatch(todosSlice.actions.getAll(lsTodos));\r\n        break;\r\n    }\r\n  }\r\n};\r\n","import { makeStyles } from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n  root: {},\r\n});\r\n","import React, { BaseSyntheticEvent } from \"react\";\r\nimport classnames from \"classnames\";\r\n\r\nimport { useStyles } from \"./style\";\r\n\r\ninterface IProps {\r\n  className?: string;\r\n  text?: string;\r\n  onClick?: (e: BaseSyntheticEvent) => void;\r\n  value?: string;\r\n  type?: \"button\" | \"reset\" | \"submit\" | undefined;\r\n}\r\nconst CustomButton: React.FC<IProps> = ({ className, text, onClick, value, type }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <button\r\n      className={classnames(classes.root, className)}\r\n      value={value || text}\r\n      type={type}\r\n      onClick={onClick}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CustomButton;\r\n","import { makeStyles } from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    width: 500,\r\n    height: 100,\r\n    background: \"rgb(134,168,231)\",\r\n    boxShadow: \"0 0 10px rgba(0,0,0,0.5)\",\r\n    borderBottom: \"2px gray solid\",\r\n    borderRadius: \"6px 6px 0px 0px\",\r\n    overflow: \"hidden\",\r\n  },\r\n  todoInput: {\r\n    width: \"70%\",\r\n    textAlign: \"center\",\r\n    overflowWrap: \"break-word\",\r\n    outline: \"none\",\r\n  },\r\n  addBtn: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    width: \"30%\",\r\n  },\r\n  todoBtn: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n    width: \"100%\",\r\n    boxShadow: \"0 0 10px  rgba(0,0,0,0.5)\",\r\n    display: \"inline-block\",\r\n    color: \"white\",\r\n    textDecoration: \"none\",\r\n    padding: \".5em 2em\",\r\n    outline: \"none\",\r\n    borderWidth: \"2px 0\",\r\n    borderStyle: \"solid none\",\r\n    borderColor: \"#FDBE33 #000 #D77206\",\r\n    borderRadius: \"0px 6px 0px 0px\",\r\n    background: \"linear-gradient(#F3AE0F, #E38916) #E38916\",\r\n    transition: \"0.2s\",\r\n\r\n    \"&:hover\": {\r\n      background: \"linear-gradient(#f5ae00, #f59500) #f5ae00\",\r\n    },\r\n  },\r\n  btnGroup: {\r\n    display: \"flex\",\r\n  },\r\n});\r\n","import React, { BaseSyntheticEvent, useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\n\r\nimport { Button } from \"../../../components\";\r\n\r\nimport { useAppDispatch } from \"../../../hooks/redux\";\r\nimport { addTodo, filterTodos, removeAll } from \"../../../service/todosService\";\r\n\r\nimport { useStyles } from \"./style\";\r\n\r\nconst ToDoForm: React.FC = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n  const [todo, setTodo] = useState({\r\n    id: \"\",\r\n    task: \"\",\r\n    completed: false,\r\n  });\r\n\r\n  const handleChange = (e: BaseSyntheticEvent) => {\r\n    setTodo({ ...todo, task: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = (e: BaseSyntheticEvent) => {\r\n    e.preventDefault();\r\n    if (todo.task.trim()) {\r\n      dispatch(addTodo({ ...todo, id: v4() }));\r\n      setTodo({ ...todo, task: \"\" });\r\n    }\r\n  };\r\n\r\n  const removeHandler = () => {\r\n    dispatch(removeAll());\r\n  };\r\n\r\n  const filterHandler = (e: BaseSyntheticEvent) => {\r\n    dispatch(filterTodos(e.currentTarget.value));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className={classes.root}>\r\n        <input\r\n          placeholder=\"I must to do!!!\"\r\n          className={classes.todoInput}\r\n          value={todo.task}\r\n          onChange={handleChange}\r\n          maxLength={40}\r\n        />\r\n        <span className={classes.addBtn}>\r\n          <Button.Custom className={classes.todoBtn} text=\"To Do\" type=\"submit\" />\r\n        </span>\r\n      </form>\r\n      <Button.Custom className={classes.todoBtn} onClick={removeHandler} text=\"Clear all\" />\r\n      <div className={classes.btnGroup}>\r\n        <Button.Custom className={classes.todoBtn} onClick={filterHandler} text=\"All\" />\r\n        <Button.Custom className={classes.todoBtn} onClick={filterHandler} text=\"Completed\" />\r\n        <Button.Custom className={classes.todoBtn} onClick={filterHandler} text=\"In progress\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoForm","import { makeStyles } from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    overflow: \"scroll\",\r\n    overflowX: \"hidden\",\r\n    width: 500,\r\n    height: 450,\r\n    background: \"white\",\r\n    boxShadow: \"0 0 10px rgba(0,0,0,0.5)\",\r\n    borderRadius: \" 0 0 5px 5px\",\r\n  },\r\n  listItem: {\r\n    width: \"98%\",\r\n    listStyle: \"none\",\r\n    listStylePosition: \"inside\",\r\n    padding: 0,\r\n  },\r\n});\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { Todo } from \"../../../components\";\r\n\r\nimport { TodoItem } from \"../../../types/todo\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/redux\";\r\nimport { getAllTodos } from \"../../../service/todosService\";\r\n\r\nimport { useStyles } from \"./style\";\r\n\r\nconst ToDoList: React.FC = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n  const { all } = useAppSelector((state) => state.todos);\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllTodos());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ul className={classes.listItem}>\r\n        {all.map((todo: TodoItem) => (\r\n          <Todo key={todo.id} todo={todo} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList","import { makeStyles } from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n  root: {\r\n    width: 500,\r\n    height: 560,\r\n    minWidth: 250,\r\n    minHeight: 300,\r\n    marginTop: 5,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { Todo } from \"../containers\";\r\n\r\nimport { useStyles } from \"./style\";\r\n\r\nconst MainPage: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Todo.Form />\r\n      <Todo.List />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport todos from \"./reducers/todo\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todos,\r\n});\r\n\r\nexport const setupStore = () => {\r\n  return configureStore({\r\n    reducer: rootReducer,\r\n  });\r\n};\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport type AppStore = ReturnType<typeof setupStore>;\r\nexport type AppDispatch = AppStore[\"dispatch\"];\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport Test from \"./pages\";\r\n// import { Header } from './containers'\r\n\r\nimport { setupStore } from \"./redux/store\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App: React.FC = () => {\r\n  const store = setupStore();\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      {/* <Header /> */}\r\n      <div className=\"App\">\r\n        <Test />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.tsx\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}